{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoItem/TodoItem.tsx","components/API/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Status","TodoItem","todo","selectedUserId","selectNewUser","useState","completed","checked","setChecked","onChecked","useCallback","prev","className","cn","type","readOnly","onClick","title","userId","TodoList","todos","onShuffleChange","filterQuery","setFilterQuery","All","status","setStatus","visibleTodos","Active","filter","Completed","filterTodosByStatus","toLowerCase","query","includes","changeStatus","event","target","value","changeFilter","onChange","map","id","request","url","endpoint","a","fetch","response","json","CurrentUser","user","setUser","userError","setUserError","useEffect","getUser","userFromServer","clearUser","name","email","phone","App","setSelectedUserId","setTodos","downloadError","setDownloadError","getDataFromServer","dataFromServer","length","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0f77195.chunk.js","sourcesContent":["import {\n  ChangeEvent,\n  FC,\n  useCallback,\n  useState,\n} from 'react';\nimport './TodoList.scss';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nenum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number | null,\n  selectNewUser: (x: number) => void;\n  onShuffleChange: () => void;\n};\n\nexport const TodoList: FC<Props> = ({\n  todos,\n  selectedUserId,\n  selectNewUser,\n  onShuffleChange,\n}) => {\n  const [filterQuery, setFilterQuery] = useState('');\n  const [status, setStatus] = useState(Status.All);\n\n  const changeShuffle = () => {\n    onShuffleChange();\n  };\n\n  const filterTodosByStatus = () => {\n    switch (status) {\n      case Status.Active:\n        return todos.filter(todo => !todo.completed);\n      case Status.Completed:\n        return todos.filter(todo => todo.completed);\n      case Status.All:\n      default:\n        return todos;\n    }\n  };\n\n  const filteredTodosByTitle = filterTodosByStatus().filter(todo => {\n    const title = todo.title.toLowerCase();\n    const query = filterQuery.toLowerCase();\n\n    return title.includes(query);\n  });\n\n  const visibleTodos = filteredTodosByTitle;\n\n  const changeStatus = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    setStatus(event.target.value as Status);\n  }, []);\n\n  const changeFilter = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setFilterQuery(event.target.value);\n  }, []);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__buttons\">\n        <label className=\"TodoList__label\">\n          Filter\n          <input\n            data-cy=\"filterByTitle\"\n            className=\"TodoList__input\"\n            type=\"text\"\n            value={filterQuery}\n            onChange={changeFilter}\n          />\n        </label>\n\n        <label className=\"TodoList__label\">\n          Select\n          <select\n            className=\"TodoList__input\"\n            value={status}\n            onChange={changeStatus}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </label>\n\n        <div className=\"TodoList__label\">\n          Random order\n          <button\n            type=\"button\"\n            className=\"TodoList__input\"\n            onClick={changeShuffle}\n          >\n            Shuffle list\n          </button>\n        </div>\n      </div>\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {visibleTodos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              selectNewUser={selectNewUser}\n              selectedUserId={selectedUserId}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import {\n  FC,\n  useCallback,\n  useState,\n} from 'react';\nimport './TodoItem.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  todo: Todo;\n  selectedUserId: number | null,\n  selectNewUser: (x: number) => void;\n};\n\nexport const TodoItem: FC<Props> = ({\n  todo,\n  selectedUserId,\n  selectNewUser,\n}) => {\n  const [checked, setChecked] = useState(todo.completed);\n\n  const onChecked = useCallback(() => {\n    setChecked(prev => !prev);\n  }, [checked]);\n\n  return (\n    <li\n      className={cn(\n        'TodoItem',\n        {\n          'TodoItem--checked': checked,\n          'TodoItem--unchecked': !checked,\n        },\n      )}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          readOnly\n          onClick={onChecked}\n        />\n        <p>{todo.title}</p>\n      </label>\n\n      {todo.userId && (\n        <button\n          className={cn(\n            'TodoItem__user-button', 'button',\n            {\n              'TodoItem__user-button--selected': todo.userId === selectedUserId,\n            },\n          )}\n          type=\"button\"\n          onClick={() => selectNewUser(todo.userId)}\n          data-cy=\"userButton\"\n        >\n          {`User #${todo.userId}`}\n        </button>\n      )}\n    </li>\n  );\n};\n","export const API_URL = 'https://mate.academy/students-api/todos';\nexport const USERS_URL = 'https://mate.academy/students-api/users';\n\nexport const request = async (url: string, endpoint: string) => {\n  const response = await fetch(`${url}${endpoint}`);\n\n  return response.json();\n};\n\nexport const getData = () => request(API_URL, '');\nexport const getUsers = (id: string) => request(USERS_URL, id);\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { getUsers } from '../API/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  selectNewUser: (x: null) => void;\n};\n\nexport const CurrentUser: FC<Props> = ({\n  userId,\n  selectNewUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [userError, setUserError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const getUser = async () => {\n      try {\n        const userFromServer = await getUsers(`/${userId}`);\n\n        setUser(userFromServer);\n        setUserError(null);\n      } catch {\n        setUser(null);\n        setUserError('Can\\'t download user');\n      }\n    };\n\n    getUser();\n  }, [userId]);\n\n  const clearUser = useCallback(() => {\n    selectNewUser(null);\n  }, []);\n\n  return (\n    <>\n      {user && (\n        <div className=\"CurrentUser\">\n          <button\n            type=\"button\"\n            className=\"button CurrentUser__button\"\n            onClick={clearUser}\n          >\n            Clear user\n          </button>\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n\n          <h3\n            className=\"CurrentUser__name\"\n            data-cy=\"userName\"\n          >\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </div>\n      )}\n      {userError && <h2>{userError}</h2>}\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getData } from './components/API/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [todos, setTodos] = useState([]);\n  const [downloadError, setDownloadError] = useState('');\n\n  useEffect(() => {\n    const getDataFromServer = async () => {\n      try {\n        const dataFromServer = await getData();\n\n        setTodos(dataFromServer);\n      } catch {\n        setDownloadError('Can\\'t download data from server!');\n      }\n    };\n\n    getDataFromServer();\n  }, []);\n\n  const selectNewUser = useCallback((id) => {\n    setSelectedUserId(id);\n  }, []);\n\n  const onShuffleChange = () => {\n    setTodos([...todos].sort(() => Math.random() - 0.5));\n  };\n\n  return (\n    <div className=\"App\">\n      {\n        downloadError.length > 0\n          ? <h2>{downloadError}</h2>\n          : (\n            <>\n              <div className=\"App__sidebar\">\n                <TodoList\n                  todos={todos}\n                  selectNewUser={selectNewUser}\n                  selectedUserId={selectedUserId}\n                  onShuffleChange={onShuffleChange}\n                />\n              </div>\n\n              <div className=\"App__content\">\n                <div className=\"App__content-container\">\n                  {selectedUserId ? (\n                    <CurrentUser\n                      userId={selectedUserId}\n                      selectNewUser={selectNewUser}\n                    />\n                  ) : 'No user selected'}\n                </div>\n              </div>\n            </>\n          )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}